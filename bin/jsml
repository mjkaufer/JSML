#!/usr/bin/env node

var fs = require('fs'),
	optparse = require('../lib/optparse');

var parser = new optparse.OptionParser([
	['-h', '--help', 'Shows help screen'],
	['-O', '--output FILE', 'File output, no argument is stdout'],
	['-c', '--compile FILE', 'compiles .json to .html']
]);

var input, output;

parser.on('help', function() {
	console.log('Usage: jsmlc -c FILE [-O FILE]\n\n'+
				'JSON Markup Language Compiler, or jsmlc is an investigation into the effectiveness of creating webpages in JSON.\n\n'+
				'Arguments:\n'+
				'\t-h\t--help\t\tThis page\n'+
				'\t-O\t--output\tHTML file\n'+
				'\t-c\t--compile\tJSML file\n\n'+
				'Version 1.0.1, (c) 2015\n'+
				'Source: https://github.com/mjkaufer/JSML/'
	);
});

parser.on('output', function(opt, val) {
	output = val;
});

parser.on('compile', function(opt, val) {
	if (!opt) { // No input file has been specified.
		console.error("Specify compile file with option '-C'.");
		process.exit(1);
	}

	compile(val);

});

parser.on(2, function(val){//default input
	input = val;



	var endIndex = Math.max(input.lastIndexOf(".jsml"), input.length)
	output = input.substring(0, endIndex) + ".html";
	if(process.argv.length <= 3)
		compile(input);
	// console.log("0", val)
});

parser.on(3, function(val){
	output = val;
	compile(input);
	// console.log("1", val)
})


parser.on(function(opt) {
    console.log('Error - see `jsml --help`');
});

parser.parse(process.argv);

function compile(infile){
	fs.readFile(infile, 'utf8', function(err, json) {
		if (err) {
			console.error(err);
			process.exit(1);
		}

		// eval` is called so we don't need to require quotes around tags
		json = eval(json);
		jsml  = "<!DOCTYPE html>\n<html>";
		jsml += handleArray(json, 0);
		jsml += "\n</html>";

		if (!output) console.log(jsml);
		else fs.writeFile(output, jsml, function(err) {
			if (err) console.error(err);
			else
				console.log("Done compiling " + input + " - saved as " + output)
		});
	});
}

function handleArray(json, tabs) {
	var body = "";

	for (var ei in json) {
		var element = json[ei];
		body += handleTag(element, tabs+1);
	}

	return body;
}

function isString(el){
	return typeof el == 'string' || el instanceof String
}

function handleTag(json, tabs) {
	if (!isString(json) && (!json.tag && !json.t)){
		console.error("Need a tag.");
		process.exit(1);
	}

	// Tabs
	var t = '\n'+(Array(tabs+1).join('\t'));

	if (isString(json))
		return t + json;
	//it will be what we concatenate to our elements to make it look all pretty & indented

	var start = "<" + (json.tag || json.t);

	if (json.attributes || !json.a) { // check if attributes are supplied
		for(var a in json.attributes)
			if (json.attributes[a])
				start+=" "+a+"=\"" + json.attributes[a] + "\""; // add the attribute value
		for(var a in json.a)
			if (json.a[a])
				start+=" "+a+"=\"" + json.a[a] + "\""; // add the attribute value
	}
	start+=">"; // append to the front

	var end = "</" + (json.tag || json.t) + ">";

	var children = "";
	if (json.children || json.c) {//if there are indeed children
		children = handleArray((json.children || json.c), tabs)+t;
	}

	return t + start + (json.text || json.T || "") + children + end;
}
